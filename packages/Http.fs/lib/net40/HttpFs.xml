<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>HttpFs</name></assembly>
<members>
<member name="P:HttpFs.Client.HttpFsState.empty">
<summary>
 Will re-generate random CLR per-app-domain -- create your own state for
 deterministic boundary generation (or anything else needing random).
</summary>
</member>
<member name="P:HttpFs.Client.Response.expectedEncoding">
<summary>
 A Uri that contains the URI of the Internet resource that responded to the request.
 &lt;see cref=&quot;https://msdn.microsoft.com/en-us/library/system.net.httpwebresponse.responseuri%28v=vs.110%29.aspx&quot;/&gt;.
</summary>
</member>
<member name="T:HttpFs.Client.CookieName">
<summary>
 The name (key) of a cookie.
 The string value is unencoded.
</summary>
</member>
<member name="T:HttpFs.Client.Form">
<summary>
 You often pass form-data to the server, e.g. curl -X POST &lt;url&gt; -F k=v -F file1=@file.png
</summary>
</member>
<member name="T:HttpFs.Client.FormData.NameValue">
<summary>
 Use when you simply post form data
</summary>
</member>
<member name="T:HttpFs.Client.FormData.MultipartMixed">
<summary>
 Use when you post multiple files as a multi-file-browse control
 Will use: multipart/mixed inside a multipart/form-data.
</summary>
</member>
<member name="T:HttpFs.Client.FormData.FormFile">
<summary>
 Use when you post a single file
 Will use: multipart/form-data
</summary>
</member>
<member name="T:HttpFs.Client.FormData">
<summary>
 http://www.w3.org/TR/html401/interact/forms.html
</summary>
</member>
<member name="T:HttpFs.Client.File">
<summary>
 A file is a file name, a content-type (application/octet-stream if unknown) and the data.
</summary>
</member>
<member name="T:HttpFs.Client.FileName">
<summary>
 An optional file name
</summary>
</member>
<member name="P:HttpFs.Client.ContentDisposition.exts">
<summary>
 e.g. &quot;name=user_name&quot;
</summary>
</member>
<member name="T:HttpFs.Client.ContentDisposition">
<summary>
 http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html
 section 19.5.1 Content-Disposition, BNF.
</summary>
</member>
<member name="T:HttpFs.Client.QueryStringValue">
<summary>
 The string value is not yet encoded.
</summary>
</member>
<member name="T:HttpFs.Client.QueryStringName">
<summary>
 The key of a query string key-value pair.
 The string value is not yet encoded.
</summary>
</member>
<member name="T:HttpFs.Client.FormValue">
<summary>
 The string value is not yet encoded.
</summary>
</member>
<member name="T:HttpFs.Client.FormEntryName">
<summary>
 The key you have in &amp;lt;input name=&quot;key&quot; ... /&amp;gt;
 This string value is not yet encoded.
</summary>
</member>
<member name="M:HttpFs.Client.getResponse(HttpFs.Client.Request)">
<summary>
 Sends the HTTP request and returns the full response as a Response record, asynchronously.
</summary>
</member>
<member name="T:HttpFs.Client.DuplicateHeader">
<summary>
 The header you tried to add was already there, see issue #64.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.responseAsBytes(HttpFs.Client.Request)">
<summary>
 Note: this sends the request, reads the response, disposes it and its stream
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.responseAsString(HttpFs.Client.Request)">
<summary>
 Note: this sends the request, reads the response, disposes it and its stream
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.timeout(System.Int32,HttpFs.Client.Request)">
<summary>
 TODO: use as filter instead (composition)
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.keepAlive(System.Boolean,HttpFs.Client.Request)">
<summary>
 Sets the keep-alive header.  Defaults to true.

 If true, Connection header also set to &apos;Keep-Alive&apos;
 If false, Connection header also set to &apos;Close&apos;

 NOTE: If true, headers only sent on first request.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.proxy(HttpFs.Client.Proxy,HttpFs.Client.Request)">
<summary>
 Sends the request via the provided proxy.

 If this is no set, the proxy settings from IE will be used, if available.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.responseCharacterEncoding(System.Text.Encoding,HttpFs.Client.Request)">
<summary>
 Decodes the response using the specified encoding, regardless of what the response specifies.

 If this is not set, response character encoding will be:
  - taken from the response content-encoding header, if provided, otherwise
  UTF8

 Many web pages define the character encoding in the HTML. This will not be used.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.cookie(HttpFs.Client.Cookie,HttpFs.Client.Request)">
<summary>
 Adds a cookie to the request
 The domain will be taken from the URL, and the path set to &apos;/&apos;.

 If your cookie appears not to be getting set, it could be because the response is a redirect,
 which (by default) will be followed automatically, but cookies will not be re-sent.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.queryStringItem(System.String,System.String,HttpFs.Client.Request)">
<summary>
 Adds the provided QueryString record onto the request URL.
 Multiple items can be appended, but only the last appended key/value with
 the same key as a previous key/value will be used.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.bodyStringEncoded(System.String,System.Text.Encoding,HttpFs.Client.Request)">
<summary>
 Sets the request body, using the provided character encoding.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.bodyString(System.String,HttpFs.Client.Request)">
<summary>
 Sets the the request body, using UTF-8 character encoding.

 Only certain request types should have a body, e.g. Posts.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.body(HttpFs.Client.RequestBody,HttpFs.Client.Request)">
<summary>
 Lets you set your own body - use the RequestBody type to build it up.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.autoDecompression(HttpFs.Client.DecompressionScheme,HttpFs.Client.Request)">
<summary>
 Sets the accept-encoding request header to accept the decompression methods selected,
 and automatically decompresses the responses.

 Multiple schemes can be OR&apos;d together, e.g. (DecompressionScheme.Deflate ||| DecompressionScheme.GZip)
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.withNTLMAuthentication(System.String,System.String,HttpFs.Client.Request)">
<summary>
 Adds a credential cache to support NTLM authentication
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.basicAuthentication(System.String,System.String)">
<summary>
 Adds an HTTP Basic Authentication header, which includes the username and password encoded as a base-64 string
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.setHeader(HttpFs.Client.RequestHeader,HttpFs.Client.Request)">
<summary>
 Adds a header, defined as a RequestHeader
 The current implementation doesn&apos;t allow you to add a single header multiple
 times. File an issue if this is a limitation for you.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.autoFollowRedirectsDisabled(HttpFs.Client.Request)">
<summary>
 Disables automatic following of redirects, which is enabled by default
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.cookiesDisabled(HttpFs.Client.Request)">
<summary>
 Disables cookies, which are enabled by default
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.createUrl(HttpFs.Client.HttpMethod,System.String)">
<summary>
 The default value is 100,000 milliseconds (100 seconds).
 &lt;see cref=&quot;https://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.timeout%28v=vs.110%29.aspx&quot;/&gt;.
</summary>
</member>
<member name="M:HttpFs.Client.RequestModule.create(HttpFs.Client.HttpMethod,System.Uri)">
 <summary>Creates the Request record which can be used to make an HTTP request</summary>
 <param name="httpMethod">The type of request to be made (Get, Post, etc.)</param>
 <param name="url">The URL of the resource including protocol, e.g. 'http://www.relentlessdevelopment.net'</param>
 <returns>The Request record</returns>
</member>
<member name="T:HttpFs.Client.RequestModule">
<summary>
 For those of you who can&apos;t be bothered to use getResponse |&gt; Response.readBodyAsString.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.getHeadersAsMap(System.Net.HttpWebResponse)">
<summary>
 Gets the headers from the passed response as a map of ResponseHeader and string.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.getResponseHeader(System.String)">
<summary>
 Get the header as a ResponseHeader option. Is an option because there are some headers we don&apos;t want to set.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.getResponseNoException(System.Net.HttpWebRequest)">
<summary>
 Uses the HttpWebRequest to get the response.
 HttpWebRequest throws an exception on anything but a 200-level response,
 so we handle such exceptions and return the response.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.getRawRequestBodyString(HttpFs.Client.HttpFsState,HttpFs.Client.Request)">
<summary>
 For debugging purposes only
 Converts the Request body to a format suitable for HttpWebRequest and returns this raw body as a string.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.toHttpWebRequest(HttpFs.Client.HttpFsState,HttpFs.Client.Request)">
<summary>
 The nasty business of turning a Request into an HttpWebRequest
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.tryWriteBody(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Hopac.Job{Microsoft.FSharp.Core.Unit}}},System.Net.HttpWebRequest)">
<summary>
 Sets body on HttpWebRequest.
 Mutates HttpWebRequest.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.setNetworkCredentials(Microsoft.FSharp.Core.FSharpOption{HttpFs.Client.Credentials},System.Net.HttpWebRequest)">
<summary>
 Sets NetworkCredentials on HttpWebRequest.
 Mutates HttpWebRequest.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.setProxy(Microsoft.FSharp.Core.FSharpOption{HttpFs.Client.Proxy},System.Net.HttpWebRequest)">
<summary>
 Sets proxy on HttpWebRequest.
 Mutates HttpWebRequest.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.setCookies(Microsoft.FSharp.Collections.FSharpList{HttpFs.Client.Cookie},System.Uri,System.Net.HttpWebRequest)">
<summary>
 Sets cookies on HttpWebRequest.
 Mutates HttpWebRequest.
</summary>
</member>
<member name="M:HttpFs.Client.DotNetWrapper.setHeaders(Microsoft.FSharp.Collections.FSharpList{HttpFs.Client.RequestHeader},System.Net.HttpWebRequest)">
<summary>
 Sets headers on HttpWebRequest.
 Mutates HttpWebRequest.
</summary>
</member>
<member name="M:HttpFs.Client.Impl.uriEncode(System.Text.Encoding)">
<summary>
 URI encoding: for each byte in the byte-representation of the string,
 as seen after encoding with a given `byteEncoding`, print the %xx character
 as an ASCII character, for transfer.

 Pass the byteEncoding -- this is equivalent of the
 `accept-charset` attribute on the form-element in HTML. If you don&apos;t
 know what to do: pass UTF8 and it will &apos;just work&apos;.
</summary>
</member>
<member name="P:HttpFs.Client.Impl.StreamWriters.writeUtf8">
<summary>
 Writes a string as UTF8
</summary>
</member>
<member name="M:HttpFs.Client.Impl.StreamWriters.writeLineUtf8(System.String)">
<summary>
 Writes a string and CRLF as UTF8
</summary>
</member>
<member name="P:HttpFs.Client.Impl.StreamWriters.writeAscii">
<summary>
 Writes a string as ASCII
</summary>
</member>
<member name="M:HttpFs.Client.Impl.StreamWriters.writeLineAscii(System.String)">
<summary>
 Writes a string and CRLF as ASCII
</summary>
</member>
<member name="T:HttpFs.Composition">
<summary>
 Module that encapsulates common compositional patterns
</summary>
</member>
<member name="T:HttpFs.Logging.CombiningTarget">
<summary>
 A logger to use for combining a number of other loggers
</summary>
</member>
<member name="T:HttpFs.Logging.LiterateConsoleTarget">
<summary>
 Logs a line in a format that is great for human consumption,
 using console colours to enhance readability.
 Sample: [10:30:49 INF] User &quot;AdamC&quot; began the &quot;checkout&quot; process with 100 cart items
</summary>
</member>
<member name="P:HttpFs.Logging.LoggingConfig.consoleSemaphore">
<summary>
 When composing apps from the outside-in (rather than having a unified
 framework with static/global config) with libraries (again, rather than
 a unified framework) like is best-practice, there&apos;s not necessarily a
 way to coordinate around the STDOUT and STDERR streams between
 different libraries running things on different threads. Use Logary&apos;s
 adapter to replace this semaphore with a global semaphore.
</summary>
</member>
<member name="P:HttpFs.Logging.LoggingConfig.getLogger">
<summary>
 The `getLogger` function returns a logger that directly can be logged to.
</summary>
</member>
<member name="P:HttpFs.Logging.LoggingConfig.timestamp">
<summary>
 The `timestamp` function should preferably be monotonic and not &apos;jumpy&apos;
 or take much time to call.
</summary>
</member>
<member name="M:HttpFs.Logging.Logger.logWithAck(HttpFs.Logging.LogLevel,Microsoft.FSharp.Core.FSharpFunc{HttpFs.Logging.LogLevel,HttpFs.Logging.Message})">
<summary>
 Evaluates the callback if the log level is enabled. Returns an async that
 itself completes when the logging infrastructure has finished writing that
 Message. Completes directly if nothing is logged. What the ack means from
 a durability standpoint depends on the logging infrastructure you&apos;re using
 behind this facade. Will not block, besides doing the computation inside
 the callback. You should not do blocking operations in the callback.
</summary>
</member>
<member name="M:HttpFs.Logging.Logger.logSimple(HttpFs.Logging.Message)">
<summary>
 Logs the message without awaiting the logging infrastructure&apos;s ack of
 having successfully written the log message. What the ack means from a
 durability standpoint depends on the logging infrastructure you&apos;re using
 behind this facade.
</summary>
</member>
<member name="M:HttpFs.Logging.Logger.log(HttpFs.Logging.LogLevel,Microsoft.FSharp.Core.FSharpFunc{HttpFs.Logging.LogLevel,HttpFs.Logging.Message})">
<summary>
 Evaluates the callback if the log level is enabled. Will not block,
 besides doing the computation inside the callback. You should not do
 blocking operations in the callback.
</summary>
</member>
<member name="T:HttpFs.Logging.Logger">
<summary>
 The logger is the interface for calling code to use for logging.
</summary>
</member>
<member name="P:HttpFs.Logging.Message.level">
<summary>
 How important? See the docs on the LogLevel type for details.
</summary>
</member>
<member name="P:HttpFs.Logging.Message.timestamp">
<summary>
 When? nanoseconds since UNIX epoch.
</summary>
</member>
<member name="P:HttpFs.Logging.Message.fields">
<summary>
 The semantic-logging data.
</summary>
</member>
<member name="P:HttpFs.Logging.Message.value">
<summary>
 The main value for this metric or event. Either a Gauge or an Event. (A
 discriminated union type)
</summary>
</member>
<member name="P:HttpFs.Logging.Message.name">
<summary>
 The &apos;path&apos; or &apos;name&apos; of this data point. Do not confuse template in
 (Event template) = message.value
</summary>
</member>
<member name="P:HttpFs.Logging.Message.utcTicks">
<summary>
 Gets the ticks for UTC since 0001-01-01 00:00:00 for this message. You
 can pass this value into a DateTimeOffset c&apos;tor
</summary>
</member>
<member name="P:HttpFs.Logging.Message.README">
<summary>
 If you&apos;re looking for how to transform the Message&apos;s fields, then use the
 module methods rather than instance methods, since you&apos;ll be creating new
 values rather than changing an existing value.
</summary>
</member>
<member name="T:HttpFs.Logging.Message">
<summary>
 This is record that is logged. It&apos;s capable of representing both metrics
 (gauges) and events. See https://github.com/logary/logary for details.
</summary>
</member>
<member name="T:HttpFs.Logging.EpochNanoSeconds">
<summary>
 The # of nanoseconds after 1970-01-01 00:00:00.
</summary>
</member>
<member name="T:HttpFs.Logging.PointValue.Gauge">
<summary>
 This is as value for a metric, with a unit attached. The unit can be
 something like Seconds or Hz.
</summary>
</member>
<member name="T:HttpFs.Logging.PointValue.Event">
<summary>
 An event is what it sounds like; something occurred and needs to be
 logged. Its field is named &apos;template&apos; because it should not be interpolated
 with values; instead these values should be put in the &apos;fields&apos; field of
 the Message.
</summary>
</member>
<member name="T:HttpFs.Logging.PointValue">
<summary>
 Represents a logged value; either a Gauge or an Event.
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel.Fatal">
<summary>
 The log message denotes a fatal error which cannot be recovered from. The
 service should be shut down. Human corrective action is needed.
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel.Error">
<summary>
 The log message is at an error level, meaning an unhandled exception
 occurred at a location where it is deemed important to keeping the service
 running. A human should take corrective action.
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel.Warn">
<summary>
 The log message is a warning; e.g. there was an unhandled exception or
 an even occurred which was unexpected. Sometimes human corrective action
 is needed.
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel.Info">
<summary>
 The log message is informational; e.g. the service started, stopped or
 some important business event occurred.
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel.Debug">
<summary>
 The log message is at a default level, debug level. Useful for shipping to
 infrastructure that further processes it, but not so useful for human
 inspection in its raw format, except during development.
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel.Verbose">
<summary>
 The log message is not that important; can be used for intricate debugging.
</summary>
</member>
<member name="M:HttpFs.Logging.LogLevel.toInt">
<summary>
 Turn the LogLevel into an integer
</summary>
</member>
<member name="M:HttpFs.Logging.LogLevel.ofString(System.String)">
<summary>
 Converts the string passed to a Loglevel.
</summary>
</member>
<member name="M:HttpFs.Logging.LogLevel.ofInt(System.Int32)">
<summary>
 Turn an integer into a LogLevel
</summary>
</member>
<member name="M:HttpFs.Logging.LogLevel.ToString">
<summary>
 Converts the LogLevel to a string
</summary>
</member>
<member name="T:HttpFs.Logging.LogLevel">
<summary>
 The log level denotes how &apos;important&apos; the gauge or event message is.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.addExn``1(``0,HttpFs.Logging.Message)">
<summary>
 Adds an exception to the Message, to the &apos;errors&apos; field, inside a list.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.setLevel(HttpFs.Logging.LogLevel,HttpFs.Logging.Message)">
<summary>
 Sets the level on the log message.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.setTimestamp(System.Int64,HttpFs.Logging.Message)">
<summary>
 Sets the timestamp on the log message.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.setFieldValue``1">
<summary>
 Alias to `setField`
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.setField(System.String,System.Object,HttpFs.Logging.Message)">
<summary>
 Sets the value of the field on the log message.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.setSingleName(System.String,HttpFs.Logging.Message)">
<summary>
 Sets the name as a single string; if this string contains dots, the string
 will be split on these dots.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.setName(System.String[],HttpFs.Logging.Message)">
<summary>
 Sets the name/path of the log message.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.gauge(System.Int64,System.String)">
<summary>
 Create a new instantaneous value in a log message.
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.eventX(System.String,HttpFs.Logging.LogLevel)">
<summary>
 Create a new event log message – like `event` but with parameters flipped.
 Useful to use with `Logger.log` with point-free style, to reduce the
 noise. E.g. `logger.logVerbose (eventX &quot;Returned {code}&quot; &gt;&gt; setField &quot;code&quot; 24)`
</summary>
</member>
<member name="M:HttpFs.Logging.MessageModule.event(HttpFs.Logging.LogLevel,System.String)">
<summary>
 Create a new event log message.
</summary>
</member>
<member name="T:HttpFs.Logging.MessageModule">
<summary>
 The Message module contains functions that can help callers compose messages. This
 module is especially helpful to open to make calls into Logary&apos;s facade small.
</summary>
</member>
<member name="M:HttpFs.Logging.Log.createHiera(System.String[])">
<summary>
 Create an hierarchically named logger
</summary>
</member>
<member name="M:HttpFs.Logging.Log.create(System.String)">
<summary>
 Create a named logger. Full stop (.) acts as segment delimiter in the
 hierachy of namespaces and loggers.
</summary>
</member>
<member name="T:HttpFs.Logging.Log">
<summary>
 Module for acquiring static loggers (when you don&apos;t want or can&apos;t)
 pass loggers as values.
</summary>
</member>
<member name="M:HttpFs.Logging.Targets.create(HttpFs.Logging.LogLevel)">
<summary>
 Create a new target. Prefer `Log.create` in your own libraries, or let the
 composing app replace your target instance through your configuration.

 Will log to console (colourised) by default, and also to the output window
 in your IDE if you specify a level below Info.
</summary>
</member>
<member name="T:HttpFs.Logging.Targets">
<summary>
 &quot;Shortcut&quot; for creating targets; useful at the top-level configuration point of
 your library.
</summary>
</member>
<member name="T:HttpFs.Logging.Global.Flyweight">
<summary>
 The flyweight just references the current configuration. If you want
 multiple per-process logging setups, then don&apos;t use the static methods,
 but instead pass a Logger instance around, setting the name field of the
 Message value you pass into the logger.
</summary>
</member>
<member name="M:HttpFs.Logging.Global.initialise(HttpFs.Logging.LoggingConfig)">
<summary>
 Call from the initialisation of your library. Initialises the
 Logary.Facade globally/per process.
</summary>
</member>
<member name="P:HttpFs.Logging.Global.DefaultConfig">
<summary>
 The global default configuration, which logs to Console at Info level.
</summary>
</member>
<member name="P:HttpFs.Logging.Global.consoleSemaphore">
<summary>
 This is the global semaphore for colourising the console output. Ensure
 that the same semaphore is used across libraries by using the Logary
 Facade Adapter in the final composing app/service.
</summary>
</member>
<member name="M:HttpFs.Logging.Formatting.defaultFormatter(HttpFs.Logging.Message)">
<summary>
 let the ISO8601 love flow
</summary>
</member>
<member name="M:HttpFs.Logging.Formatting.literateDefaultTokeniser(HttpFs.Logging.Literate.LiterateOptions,HttpFs.Logging.Message)">
<summary>
 Split a structured message up into theme-able parts (tokens), allowing the
 final output to display to a user with colours to enhance readability.
</summary>
</member>
<member name="T:HttpFs.Logging.Formatting">
<summary>
 Internal module for formatting text for printing to the console.
</summary>
</member>
<member name="M:HttpFs.Logging.FsMtParser.parseParts(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{HttpFs.Logging.FsMtParser.Property,Microsoft.FSharp.Core.Unit})">
<summary>
 Parses template strings such as &quot;Hello, {PropertyWithFormat:##.##}&quot;
 and calls the &apos;foundTextF&apos; or &apos;foundPropF&apos; functions as the text or
 property tokens are encountered.
</summary>
</member>
<member name="T:HttpFs.Logging.Literals">
<summary>
 Module that contains the &apos;known&apos; keys of the Maps in the Message type&apos;s
 fields/runtime data.
</summary>
</member>
<member name="T:HttpFs.Logging.Literate.LiterateToken">
<summary>
 The output tokens, which can be potentially coloured.
</summary>
</member>
<member name="T:HttpFs.Logging.LoggerEx">
<summary>
 Syntactic sugar on top of Logger for F# libraries.
</summary>
</member>
<member name="M:HttpFs.Logging.DateTimeOffset.ticksUTC(System.Int64)">
<summary>
 Get the DateTimeOffset ticks from EpochNanoSeconds
</summary>
</member>
<member name="M:HttpFs.Logging.DateTimeOffset.timestamp(System.DateTimeOffset)">
<summary>
 Get the Logary timestamp off the DateTimeOffset.
</summary>
</member>
<member name="T:HttpFs.Logging.DateTimeOffset">
<summary>
 Helper functions for transforming DateTimeOffset to timestamps in unix epoch.
</summary>
</member>
<member name="M:HttpFs.Logging.DateTime.ticksUTC(System.Int64)">
<summary>
 Get the DateTimeOffset ticks off from the EpochNanoSeconds.
</summary>
</member>
<member name="M:HttpFs.Logging.DateTime.timestamp(System.DateTime)">
<summary>
 Get the Logary timestamp off the DateTime.
</summary>
</member>
<member name="T:HttpFs.Logging.DateTime">
<summary>
 Helper functions for transforming DateTime to timestamps in unix epoch.
</summary>
</member>
<member name="M:YoLo.AsyncBuilder.Bind``1(Microsoft.FSharp.Control.FSharpAsyncBuilder,System.Threading.Tasks.Task,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 An extension method that overloads the standard &apos;Bind&apos; of the &apos;async&apos; builder. The new overload awaits on
 a standard .NET task which does not commpute a value
</summary>
</member>
<member name="M:YoLo.AsyncBuilder.Bind``2(Microsoft.FSharp.Control.FSharpAsyncBuilder,System.Threading.Tasks.Task{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
<summary>
 An extension method that overloads the standard &apos;Bind&apos; of the &apos;async&apos; builder. The new overload awaits on
 a standard .NET task
</summary>
</member>
<member name="M:YoLo.Async.AwaitTask.Static(System.Threading.Tasks.Task)">
<summary>
 Await a task asynchronously
</summary>
</member>
<member name="M:YoLo.Async.AsyncRaise.Static``1(System.Exception)">
<summary>
 Raise an exception on the async computation/workflow.
</summary>
</member>
<member name="M:YoLo.Random.NextUInt64(System.Random)">
<summary>
 generate a new random ulong64 value
</summary>
</member>
<member name="P:YoLo.App.resource">
<summary>
 Get the current assembly resource
</summary>
</member>
<member name="M:YoLo.App.resourceIn(System.Reflection.Assembly,System.String)">
<summary>
 Get the assembly resource
</summary>
</member>
<member name="M:YoLo.App.getVersion">
<summary>
 Gets the calling assembly&apos;s informational version number as a string
</summary>
</member>
<member name="M:YoLo.List.sequenceChoiceA``2(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpChoice{``0,``1}})">
<summary>
 Transform a &quot;list&lt;Choice&gt;&quot; into a &quot;Choice&lt;list&gt;&quot; and collect the results
 using apply.
</summary>
</member>
<member name="M:YoLo.List.traverseChoiceA``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Map a Choice-producing function over a list to get a new Choice using
 applicative style. (&apos;a -&gt; Choice&lt;&apos;b, &apos;c&gt;) -&gt; &apos;a list -&gt; Choice&lt;&apos;b list, &apos;c&gt;
</summary>
</member>
<member name="M:YoLo.List.sequenceAsyncA``1(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Control.FSharpAsync{``0}})">
<summary>
 Transform a &quot;list&lt;Async&gt;&quot; into a &quot;Async&lt;list&gt;&quot; and collect the results
 using apply.
</summary>
</member>
<member name="M:YoLo.List.traverseAsyncA``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Map a Async producing function over a list to get a new Async using
 applicative style. (&apos;a -&gt; Async&lt;&apos;b&gt;) -&gt; &apos;a list -&gt; Async&lt;&apos;b list&gt;
</summary>
</member>
<member name="M:YoLo.List.chunk``1(System.UInt32,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Chunk a list into pageSize large chunks
</summary>
</member>
<member name="M:YoLo.List.split``1(System.UInt32,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Split xs at n, into two lists, or where xs ends if xs.Length &lt; n.
</summary>
</member>
<member name="M:YoLo.Regex.match(System.String,System.String)">
<summary>
 Match the `input` against the regex `pattern`. You can do a 
 `Seq.cast&lt;Group&gt;` on the result to get it as a sequence
 and also index with `.[&quot;name&quot;]` into the result if you have
 named capture groups.
</summary>
</member>
<member name="M:YoLo.Array.equalsConstantTime``1(``0[],``0[])">
<summary>
 Ordinally compare two arrays in constant time, bounded by the length of the
 longest array. This function uses the F# language equality.
</summary>
</member>
<member name="M:YoLo.Comparisons.hashOn``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 hash x on the selected value from f
</summary>
</member>
<member name="M:YoLo.Comparisons.equalsOn``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0,System.Object)">
<summary>
 check equality on x and y mapped on selected value from function f
</summary>
</member>
<member name="M:YoLo.Comparisons.compareOn``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0,System.Object)">
<summary>
 compare x to yobj mapped on selected value from function f
</summary>
</member>
<member name="P:YoLo.UTF8.decodeBase64">
<summary>
 Convert the passed string `s`, assumed to be a valid Base64 encoding, to a
 CLR string, going through UTF8.
</summary>
</member>
<member name="P:YoLo.UTF8.encodeBase64">
<summary>
 Convert the passed string `s` to UTF8 and then encode the buffer with
 base64.
</summary>
</member>
<member name="M:YoLo.UTF8.bytes(System.String)">
<summary>
 Get the UTF8-encoding of the string.
</summary>
</member>
<member name="M:YoLo.UTF8.toStringAtOffset(System.Byte[],System.Int32,System.Int32)">
<summary>
 Convert the byte array to a string, by indexing into the passed buffer `b`
 and taking `count` bytes from it.
</summary>
</member>
<member name="M:YoLo.UTF8.toString(System.Byte[])">
<summary>
 Convert the full buffer `b` filled with UTF8-encoded strings into a CLR
 string.
</summary>
</member>
<member name="M:YoLo.Map.put``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
<summary>
 put a key to the map; if it&apos;s not there already, just add it
 otherwise, remove the existing key and place it there.
</summary>
</member>
<member name="M:YoLo.Bytes.equalsConstantTime(System.Byte[],System.Byte[])">
<summary>
 Compare two byte arrays in constant time, bounded by the length of the
 longest byte array.
</summary>
</member>
<member name="M:YoLo.String.equalsConstantTime(System.String,System.String)">
<summary>
 Ordinally compare two strings in constant time, bounded by the length of the
 longest string.
</summary>
</member>
<member name="M:YoLo.String.equalsOrdinalCI(System.String,System.String)">
<summary>
 Compare ordinally with ignore case.
</summary>
</member>
<member name="M:YoLo.String.equalsCaseInsensitive(System.String,System.String)">
<summary>
 Also, invariant culture
</summary>
</member>
<member name="M:YoLo.String.equals(System.String,System.String)">
<summary>
 Also, invariant culture
</summary>
</member>
</members>
</doc>
